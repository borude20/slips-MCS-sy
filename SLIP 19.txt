SLIP 19 

Q.1 Write a Java Program to implement Factory method for Pizza Store with createPizza(),
 orederPizza(), prepare(), Bake(), cut(), box(). Use this to create variety of pizzaâ€™s
 like NyStyleCheesePizza, ChicagoStyleCheesePizza etc. 

// Pizza interface
interface Pizza {
    void prepare();
    void bake();
    void cut();
    void box();
}

// Concrete implementation of NY Style Cheese Pizza
class NYStyleCheesePizza implements Pizza {
    @Override
    public void prepare() {
        System.out.println("Preparing NY Style Cheese Pizza");
    }

    @Override
    public void bake() {
        System.out.println("Baking NY Style Cheese Pizza");
    }

    @Override
    public void cut() {
        System.out.println("Cutting NY Style Cheese Pizza");
    }

    @Override
    public void box() {
        System.out.println("Boxing NY Style Cheese Pizza");
    }
}

// Concrete implementation of Chicago Style Cheese Pizza
class ChicagoStyleCheesePizza implements Pizza {
    @Override
    public void prepare() {
        System.out.println("Preparing Chicago Style Cheese Pizza");
    }

    @Override
    public void bake() {
        System.out.println("Baking Chicago Style Cheese Pizza");
    }

    @Override
    public void cut() {
        System.out.println("Cutting Chicago Style Cheese Pizza");
    }

    @Override
    public void box() {
        System.out.println("Boxing Chicago Style Cheese Pizza");
    }
}

// PizzaStore with Factory Method
abstract class PizzaStore {
    // Factory method
    abstract Pizza createPizza(String type);

    // Order pizza using the factory method
    public Pizza orderPizza(String type) {
        Pizza pizza = createPizza(type);

        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();

        return pizza;
    }
}

// Concrete PizzaStore for NY Style Pizza
class NYPizzaStore extends PizzaStore {
    @Override
    Pizza createPizza(String type) {
        if (type.equals("cheese")) {
            return new NYStyleCheesePizza();
        } else {
            // Add more pizza types as needed
            return null;
        }
    }
}

// Concrete PizzaStore for Chicago Style Pizza
class ChicagoPizzaStore extends PizzaStore {
    @Override
    Pizza createPizza(String type) {
        if (type.equals("cheese")) {
            return new ChicagoStyleCheesePizza();
        } else {
            // Add more pizza types as needed
            return null;
        }
    }
}

// Main class to test the pizza store
public class Main {
    public static void main(String[] args) {
        PizzaStore nyPizzaStore = new NYPizzaStore();
        PizzaStore chicagoPizzaStore = new ChicagoPizzaStore();

        Pizza nyCheesePizza = nyPizzaStore.orderPizza("cheese");
        System.out.println("\n");

        Pizza chicagoCheesePizza = chicagoPizzaStore.orderPizza("cheese");
    }
}
==========================================

Q.2. Write a python program to implement Naive Bayes.
# Import necessary libraries
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics

# Sample data
corpus = [
    ("I love programming", "positive"),
    ("Machine learning is fascinating", "positive"),
    ("I dislike bugs in the code", "negative"),
    ("Python is my favorite language", "positive"),
    ("I find debugging challenging", "negative"),
    ("I enjoy building software", "positive"),
]

# Split the data into training and testing sets
texts, labels = zip(*corpus)
X_train, X_test, y_train, y_test = train_test_split(texts, labels, test_size=0.2, random_state=42)

# Convert text data to feature vectors
vectorizer = CountVectorizer()
X_train_counts = vectorizer.fit_transform(X_train)
X_test_counts = vectorizer.transform(X_test)

# Train a Naive Bayes classifier
classifier = MultinomialNB()
classifier.fit(X_train_counts, y_train)

# Make predictions on the test set
predictions = classifier.predict(X_test_counts)

# Evaluate the performance of the classifier
accuracy = metrics.accuracy_score(y_test, predictions)
precision = metrics.precision_score(y_test, predictions, pos_label="positive")
recall = metrics.recall_score(y_test, predictions, pos_label="positive")

# Print the results
print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
==================================================
Q.3 Design a Django application that adds web pages with views and templates
--> Not Answered.