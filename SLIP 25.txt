SLIP 25 
Q.1 Write a Java Program to implement Singleton pattern for multithreading
class Singleton {
    private static volatile Singleton singletonInstance;

    private Singleton() {
        // Prevents formation of another instance by reflection
        if (singletonInstance != null) {
            throw new RuntimeException("Use getInstance() method to get the single instance of this class.");
        }
    }

    public static Singleton getInstance() {
        if (singletonInstance == null) {
            synchronized (Singleton.class) {
                if (singletonInstance == null) {
                    singletonInstance = new Singleton();
                }
            }
        }
        return singletonInstance;
    }
}

public class Main {
    public static void main(String[] args) {
        Singleton instanceOne = Singleton.getInstance();
        Singleton instanceTwo = Singleton.getInstance();

        System.out.println("instanceOne hashCode=" + instanceOne.hashCode());
        System.out.println("instanceTwo hashCode=" + instanceTwo.hashCode());
    }
}
===============================================
Q.2. Write a python program to Implement Simple Linear Regression for predicting house
price. 
# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Generate synthetic data for demonstration purposes
# In a real-world scenario, you would load your dataset here
np.random.seed(42)
house_size = np.random.randint(100, 250, 100)
house_price = 50 + 3.5 * house_size + np.random.normal(0, 20, 100)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(house_size.reshape(-1, 1), house_price, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Plot the data and the regression line
plt.scatter(X_test, y_test, color='black')
plt.plot(X_test, y_pred, color='blue', linewidth=3)
plt.xlabel('House Size (sq. ft)')
plt.ylabel('House Price')
plt.title('Simple Linear Regression - House Price Prediction')
plt.show()
=======================================================

Q.3 Create a Simple Web Server using node js.

--> Not Answered.