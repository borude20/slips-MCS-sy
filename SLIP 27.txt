SLIP 27

Q.1 Write a Java Program to implement Abstract Factory Pattern for Shape interface

// Shape interface
import java.util.ArrayList;
import java.util.List;

abstract class Shape {
    abstract void draw();
}

class Circle extends Shape {
    @Override
    void draw() {
        System.out.println("Drawing a Circle");
    }
}

class Rectangle extends Shape {
    @Override
    void draw() {
        System.out.println("Drawing a Rectangle");
    }
}

class Square extends Shape {
    @Override
    void draw() {
        System.out.println("Drawing a Square");
    }
}

abstract class ShapeFactory {
    public abstract Shape createShape();
}

class CircleFactory extends ShapeFactory {
    @Override
    public Shape createShape() {
        return new Circle();
    }
}

class RectangleFactory extends ShapeFactory {
    @Override
    public Shape createShape() {
        return new Rectangle();
    }
}

class SquareFactory extends ShapeFactory {
    @Override
    public Shape createShape() {
        return new Square();
    }
}

class FactoryProducer {
    public static ShapeFactory getFactory(String shapeType) {
        if(shapeType.equalsIgnoreCase("CIRCLE")) {
            return new CircleFactory();
        } else if(shapeType.equalsIgnoreCase("RECTANGLE")) {
            return new RectangleFactory();
        } else if(shapeType.equalsIgnoreCase("SQUARE")) {
            return new SquareFactory();
        }

        return null;
    }
}

public class Main {
    public static void main(String[] args) {
        List<Shape> shapes = new ArrayList<>();

        ShapeFactory shapeFactory = FactoryProducer.getFactory("CIRCLE");
        shapes.add(shapeFactory.createShape());

        shapeFactory = FactoryProducer.getFactory("RECTANGLE");
        shapes.add(shapeFactory.createShape());

        shapeFactory = FactoryProducer.getFactory("SQUARE");
        shapes.add(shapeFactory.createShape());

        for(Shape shape : shapes) {
            shape.draw();
        }
    }
}
========================================
Q.2. Write a python program to implement Polynomial Linear Regression for given dataset

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Generate some example data
np.random.seed(0)
X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + np.random.randn(100, 1)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Polynomial features
degree = 2  # you can change this degree to experiment with different polynomial degrees
poly_features = PolynomialFeatures(degree=degree, include_bias=False)
X_poly_train = poly_features.fit_transform(X_train)

# Train a linear regression model on the polynomial features
lin_reg = LinearRegression()
lin_reg.fit(X_poly_train, y_train)

# Make predictions on the training set
y_train_pred = lin_reg.predict(X_poly_train)

# Evaluate the model on the training set
mse_train = mean_squared_error(y_train, y_train_pred)
print(f"Mean Squared Error on Training Set: {mse_train}")

# Visualize the training set predictions
plt.scatter(X_train, y_train, color='blue', label='Actual Data')
plt.plot(X_train, y_train_pred, color='red', linewidth=3, label='Polynomial Regression')
plt.title('Polynomial Linear Regression - Training Set')
plt.xlabel('X')
plt.ylabel('y')
plt.legend()
plt.show()

# Make predictions on the test set
X_poly_test = poly_features.transform(X_test)
y_test_pred = lin_reg.predict(X_poly_test)

# Evaluate the model on the test set
mse_test = mean_squared_error(y_test, y_test_pred)
print(f"Mean Squared Error on Test Set: {mse_test}")

# Visualize the test set predictions
plt.scatter(X_test, y_test, color='blue', label='Actual Data')
plt.plot(X_test, y_test_pred, color='red', linewidth=3, label='Polynomial Regression')
plt.title('Polynomial Linear Regression - Test Set')
plt.xlabel('X')
plt.ylabel('y')
plt.legend()
plt.show()
==============================================
Q.3 Create your Django app in which after running the server, you should see on the
browser, the text “Hello! I am learning Django”, which you defined in the index view. 

--> Not Ans.