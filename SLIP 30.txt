SLIP 30 

Q.1 Write a Java Program to implement Factory method for Pizza Store with createPizza(),
 orederPizza(), prepare(), Bake(), cut(), box(). Use this to create variety of pizzaâ€™s
 like NyStyleCheesePizza, ChicagoStyleCheesePizza etc. 

// Pizza interface
interface Pizza {
    void prepare();
    void bake();
    void cut();
    void box();
}

// Concrete Pizza implementations
class NyStyleCheesePizza implements Pizza {
    public void prepare() {
        System.out.println("Preparing New York Style Cheese Pizza");
    }

    public void bake() {
        System.out.println("Baking New York Style Cheese Pizza");
    }

    public void cut() {
        System.out.println("Cutting New York Style Cheese Pizza");
    }

    public void box() {
        System.out.println("Boxing New York Style Cheese Pizza");
    }
}

class ChicagoStyleCheesePizza implements Pizza {
    public void prepare() {
        System.out.println("Preparing Chicago Style Cheese Pizza");
    }

    public void bake() {
        System.out.println("Baking Chicago Style Cheese Pizza");
    }

    public void cut() {
        System.out.println("Cutting Chicago Style Cheese Pizza");
    }

    public void box() {
        System.out.println("Boxing Chicago Style Cheese Pizza");
    }
}

// PizzaStore with Factory Method
abstract class PizzaStore {
    public Pizza orderPizza(String type) {
        Pizza pizza = createPizza(type);

        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();

        return pizza;
    }

    protected abstract Pizza createPizza(String type);
}

// Concrete PizzaStore implementations
class NyPizzaStore extends PizzaStore {
    protected Pizza createPizza(String type) {
        if (type.equals("cheese")) {
            return new NyStyleCheesePizza();
        }
        // Add more pizza types as needed
        return null;
    }
}

class ChicagoPizzaStore extends PizzaStore {
    protected Pizza createPizza(String type) {
        if (type.equals("cheese")) {
            return new ChicagoStyleCheesePizza();
        }
        // Add more pizza types as needed
        return null;
    }
}

public class Main {
    public static void main(String[] args) {
        PizzaStore nyStore = new NyPizzaStore();
        PizzaStore chicagoStore = new ChicagoPizzaStore();

        Pizza nyCheesePizza = nyStore.orderPizza("cheese");
        Pizza chicagoCheesePizza = chicagoStore.orderPizza("cheese");
    }
}
Q. 2 Write a python program to Implement Simple Linear Regression for predicting house
price. 
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

np.random.seed(0)
X = np.random.rand(100, 1) 
y = 5 * X + np.random.randn(100, 1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

plt.scatter(X_train, y_train, label='Training Data')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Regression Line')
plt.xlabel('Square Footage')
plt.ylabel('House Price')
plt.legend()
plt.show()

print(f'Intercept: {model.intercept_[0]}')
print(f'Coefficient: {model.coef_[0][0]}')

from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

=============================================
Q.2. Write a python program to implement Linear SVM.

import numpy as np
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

# Load the dataset
iris = datasets.load_iris()
X = iris.data
y = iris.target

# Standardize the feature data
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split the dataset into a training set and a test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Linear SVM model
model = LinearSVC()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Calculate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
=================================================
Q.3 Implement Login System using Django. 

---> Not Answered.
